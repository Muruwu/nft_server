// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/mc_nft/dal/model"
)

func newUserInfo(db *gorm.DB) userInfo {
	_userInfo := userInfo{}

	_userInfo.userInfoDo.UseDB(db)
	_userInfo.userInfoDo.UseModel(&model.UserInfo{})

	tableName := _userInfo.userInfoDo.TableName()
	_userInfo.ALL = field.NewField(tableName, "*")
	_userInfo.ID = field.NewInt64(tableName, "id")
	_userInfo.Nickname = field.NewString(tableName, "nickname")
	_userInfo.Avatar = field.NewString(tableName, "avatar")
	_userInfo.RealName = field.NewString(tableName, "real_name")
	_userInfo.IDCard = field.NewString(tableName, "id_card")
	_userInfo.CertifiedPhone = field.NewString(tableName, "certified_phone")
	_userInfo.CertifiedTime = field.NewTime(tableName, "certified_time")
	_userInfo.IsCertified = field.NewInt32(tableName, "is_certified")
	_userInfo.ChainAccountID = field.NewString(tableName, "chain_account_id")
	_userInfo.ChainAccountName = field.NewString(tableName, "chain_account_name")
	_userInfo.InviteCode = field.NewString(tableName, "invite_code")
	_userInfo.ChannelCode = field.NewString(tableName, "channel_code")
	_userInfo.InviteUserID = field.NewInt64(tableName, "invite_user_id")
	_userInfo.CreditsCnt = field.NewInt32(tableName, "credits_cnt")
	_userInfo.DiamondCnt = field.NewInt32(tableName, "diamond_cnt")
	_userInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_userInfo.UpdatedAt = field.NewTime(tableName, "updated_at")

	_userInfo.fillFieldMap()

	return _userInfo
}

type userInfo struct {
	userInfoDo userInfoDo

	ALL              field.Field
	ID               field.Int64
	Nickname         field.String
	Avatar           field.String
	RealName         field.String
	IDCard           field.String
	CertifiedPhone   field.String
	CertifiedTime    field.Time
	IsCertified      field.Int32
	ChainAccountID   field.String
	ChainAccountName field.String
	InviteCode       field.String
	ChannelCode      field.String
	InviteUserID     field.Int64
	CreditsCnt       field.Int32
	DiamondCnt       field.Int32
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (u userInfo) Table(newTableName string) *userInfo {
	u.userInfoDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userInfo) As(alias string) *userInfo {
	u.userInfoDo.DO = *(u.userInfoDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userInfo) updateTableName(table string) *userInfo {
	u.ALL = field.NewField(table, "*")
	u.ID = field.NewInt64(table, "id")
	u.Nickname = field.NewString(table, "nickname")
	u.Avatar = field.NewString(table, "avatar")
	u.RealName = field.NewString(table, "real_name")
	u.IDCard = field.NewString(table, "id_card")
	u.CertifiedPhone = field.NewString(table, "certified_phone")
	u.CertifiedTime = field.NewTime(table, "certified_time")
	u.IsCertified = field.NewInt32(table, "is_certified")
	u.ChainAccountID = field.NewString(table, "chain_account_id")
	u.ChainAccountName = field.NewString(table, "chain_account_name")
	u.InviteCode = field.NewString(table, "invite_code")
	u.ChannelCode = field.NewString(table, "channel_code")
	u.InviteUserID = field.NewInt64(table, "invite_user_id")
	u.CreditsCnt = field.NewInt32(table, "credits_cnt")
	u.DiamondCnt = field.NewInt32(table, "diamond_cnt")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userInfo) WithContext(ctx context.Context) *userInfoDo { return u.userInfoDo.WithContext(ctx) }

func (u userInfo) TableName() string { return u.userInfoDo.TableName() }

func (u userInfo) Alias() string { return u.userInfoDo.Alias() }

func (u *userInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userInfo) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 17)
	u.fieldMap["id"] = u.ID
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["real_name"] = u.RealName
	u.fieldMap["id_card"] = u.IDCard
	u.fieldMap["certified_phone"] = u.CertifiedPhone
	u.fieldMap["certified_time"] = u.CertifiedTime
	u.fieldMap["is_certified"] = u.IsCertified
	u.fieldMap["chain_account_id"] = u.ChainAccountID
	u.fieldMap["chain_account_name"] = u.ChainAccountName
	u.fieldMap["invite_code"] = u.InviteCode
	u.fieldMap["channel_code"] = u.ChannelCode
	u.fieldMap["invite_user_id"] = u.InviteUserID
	u.fieldMap["credits_cnt"] = u.CreditsCnt
	u.fieldMap["diamond_cnt"] = u.DiamondCnt
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userInfo) clone(db *gorm.DB) userInfo {
	u.userInfoDo.ReplaceDB(db)
	return u
}

type userInfoDo struct{ gen.DO }

func (u userInfoDo) Debug() *userInfoDo {
	return u.withDO(u.DO.Debug())
}

func (u userInfoDo) WithContext(ctx context.Context) *userInfoDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userInfoDo) ReadDB() *userInfoDo {
	return u.Clauses(dbresolver.Read)
}

func (u userInfoDo) WriteDB() *userInfoDo {
	return u.Clauses(dbresolver.Write)
}

func (u userInfoDo) Clauses(conds ...clause.Expression) *userInfoDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userInfoDo) Returning(value interface{}, columns ...string) *userInfoDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userInfoDo) Not(conds ...gen.Condition) *userInfoDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userInfoDo) Or(conds ...gen.Condition) *userInfoDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userInfoDo) Select(conds ...field.Expr) *userInfoDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userInfoDo) Where(conds ...gen.Condition) *userInfoDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userInfoDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userInfoDo) Order(conds ...field.Expr) *userInfoDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userInfoDo) Distinct(cols ...field.Expr) *userInfoDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userInfoDo) Omit(cols ...field.Expr) *userInfoDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userInfoDo) Join(table schema.Tabler, on ...field.Expr) *userInfoDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userInfoDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *userInfoDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userInfoDo) Group(cols ...field.Expr) *userInfoDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userInfoDo) Having(conds ...gen.Condition) *userInfoDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userInfoDo) Limit(limit int) *userInfoDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userInfoDo) Offset(offset int) *userInfoDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userInfoDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userInfoDo) Unscoped() *userInfoDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userInfoDo) Create(values ...*model.UserInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userInfoDo) CreateInBatches(values []*model.UserInfo, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userInfoDo) Save(values ...*model.UserInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userInfoDo) First() (*model.UserInfo, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfo), nil
	}
}

func (u userInfoDo) Take() (*model.UserInfo, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfo), nil
	}
}

func (u userInfoDo) Last() (*model.UserInfo, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfo), nil
	}
}

func (u userInfoDo) Find() ([]*model.UserInfo, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserInfo), err
}

func (u userInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInfo, err error) {
	buf := make([]*model.UserInfo, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userInfoDo) FindInBatches(result *[]*model.UserInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userInfoDo) Attrs(attrs ...field.AssignExpr) *userInfoDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userInfoDo) Assign(attrs ...field.AssignExpr) *userInfoDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userInfoDo) Joins(fields ...field.RelationField) *userInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userInfoDo) Preload(fields ...field.RelationField) *userInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userInfoDo) FirstOrInit() (*model.UserInfo, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfo), nil
	}
}

func (u userInfoDo) FirstOrCreate() (*model.UserInfo, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfo), nil
	}
}

func (u userInfoDo) FindByPage(offset int, limit int) (result []*model.UserInfo, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userInfoDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u *userInfoDo) withDO(do gen.Dao) *userInfoDo {
	u.DO = *do.(*gen.DO)
	return u
}
