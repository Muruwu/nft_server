// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/mc_nft/dal/model"
)

func newCreditsRecord(db *gorm.DB) creditsRecord {
	_creditsRecord := creditsRecord{}

	_creditsRecord.creditsRecordDo.UseDB(db)
	_creditsRecord.creditsRecordDo.UseModel(&model.CreditsRecord{})

	tableName := _creditsRecord.creditsRecordDo.TableName()
	_creditsRecord.ALL = field.NewField(tableName, "*")
	_creditsRecord.ID = field.NewInt64(tableName, "id")
	_creditsRecord.UserID = field.NewInt64(tableName, "user_id")
	_creditsRecord.CreditsCnt = field.NewInt32(tableName, "credits_cnt")
	_creditsRecord.Source = field.NewInt32(tableName, "source")
	_creditsRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_creditsRecord.UpdatedAt = field.NewTime(tableName, "updated_at")

	_creditsRecord.fillFieldMap()

	return _creditsRecord
}

type creditsRecord struct {
	creditsRecordDo creditsRecordDo

	ALL        field.Field
	ID         field.Int64
	UserID     field.Int64
	CreditsCnt field.Int32
	Source     field.Int32
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (c creditsRecord) Table(newTableName string) *creditsRecord {
	c.creditsRecordDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c creditsRecord) As(alias string) *creditsRecord {
	c.creditsRecordDo.DO = *(c.creditsRecordDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *creditsRecord) updateTableName(table string) *creditsRecord {
	c.ALL = field.NewField(table, "*")
	c.ID = field.NewInt64(table, "id")
	c.UserID = field.NewInt64(table, "user_id")
	c.CreditsCnt = field.NewInt32(table, "credits_cnt")
	c.Source = field.NewInt32(table, "source")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *creditsRecord) WithContext(ctx context.Context) *creditsRecordDo {
	return c.creditsRecordDo.WithContext(ctx)
}

func (c creditsRecord) TableName() string { return c.creditsRecordDo.TableName() }

func (c creditsRecord) Alias() string { return c.creditsRecordDo.Alias() }

func (c *creditsRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *creditsRecord) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["credits_cnt"] = c.CreditsCnt
	c.fieldMap["source"] = c.Source
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c creditsRecord) clone(db *gorm.DB) creditsRecord {
	c.creditsRecordDo.ReplaceDB(db)
	return c
}

type creditsRecordDo struct{ gen.DO }

func (c creditsRecordDo) Debug() *creditsRecordDo {
	return c.withDO(c.DO.Debug())
}

func (c creditsRecordDo) WithContext(ctx context.Context) *creditsRecordDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c creditsRecordDo) ReadDB() *creditsRecordDo {
	return c.Clauses(dbresolver.Read)
}

func (c creditsRecordDo) WriteDB() *creditsRecordDo {
	return c.Clauses(dbresolver.Write)
}

func (c creditsRecordDo) Clauses(conds ...clause.Expression) *creditsRecordDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c creditsRecordDo) Returning(value interface{}, columns ...string) *creditsRecordDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c creditsRecordDo) Not(conds ...gen.Condition) *creditsRecordDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c creditsRecordDo) Or(conds ...gen.Condition) *creditsRecordDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c creditsRecordDo) Select(conds ...field.Expr) *creditsRecordDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c creditsRecordDo) Where(conds ...gen.Condition) *creditsRecordDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c creditsRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *creditsRecordDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c creditsRecordDo) Order(conds ...field.Expr) *creditsRecordDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c creditsRecordDo) Distinct(cols ...field.Expr) *creditsRecordDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c creditsRecordDo) Omit(cols ...field.Expr) *creditsRecordDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c creditsRecordDo) Join(table schema.Tabler, on ...field.Expr) *creditsRecordDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c creditsRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *creditsRecordDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c creditsRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *creditsRecordDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c creditsRecordDo) Group(cols ...field.Expr) *creditsRecordDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c creditsRecordDo) Having(conds ...gen.Condition) *creditsRecordDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c creditsRecordDo) Limit(limit int) *creditsRecordDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c creditsRecordDo) Offset(offset int) *creditsRecordDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c creditsRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *creditsRecordDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c creditsRecordDo) Unscoped() *creditsRecordDo {
	return c.withDO(c.DO.Unscoped())
}

func (c creditsRecordDo) Create(values ...*model.CreditsRecord) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c creditsRecordDo) CreateInBatches(values []*model.CreditsRecord, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c creditsRecordDo) Save(values ...*model.CreditsRecord) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c creditsRecordDo) First() (*model.CreditsRecord, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreditsRecord), nil
	}
}

func (c creditsRecordDo) Take() (*model.CreditsRecord, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreditsRecord), nil
	}
}

func (c creditsRecordDo) Last() (*model.CreditsRecord, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreditsRecord), nil
	}
}

func (c creditsRecordDo) Find() ([]*model.CreditsRecord, error) {
	result, err := c.DO.Find()
	return result.([]*model.CreditsRecord), err
}

func (c creditsRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CreditsRecord, err error) {
	buf := make([]*model.CreditsRecord, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c creditsRecordDo) FindInBatches(result *[]*model.CreditsRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c creditsRecordDo) Attrs(attrs ...field.AssignExpr) *creditsRecordDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c creditsRecordDo) Assign(attrs ...field.AssignExpr) *creditsRecordDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c creditsRecordDo) Joins(fields ...field.RelationField) *creditsRecordDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c creditsRecordDo) Preload(fields ...field.RelationField) *creditsRecordDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c creditsRecordDo) FirstOrInit() (*model.CreditsRecord, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreditsRecord), nil
	}
}

func (c creditsRecordDo) FirstOrCreate() (*model.CreditsRecord, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreditsRecord), nil
	}
}

func (c creditsRecordDo) FindByPage(offset int, limit int) (result []*model.CreditsRecord, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c creditsRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c creditsRecordDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c *creditsRecordDo) withDO(do gen.Dao) *creditsRecordDo {
	c.DO = *do.(*gen.DO)
	return c
}
