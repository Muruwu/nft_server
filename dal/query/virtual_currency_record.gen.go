// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/mc_nft/dal/model"
)

func newVirtualCurrencyRecord(db *gorm.DB) virtualCurrencyRecord {
	_virtualCurrencyRecord := virtualCurrencyRecord{}

	_virtualCurrencyRecord.virtualCurrencyRecordDo.UseDB(db)
	_virtualCurrencyRecord.virtualCurrencyRecordDo.UseModel(&model.VirtualCurrencyRecord{})

	tableName := _virtualCurrencyRecord.virtualCurrencyRecordDo.TableName()
	_virtualCurrencyRecord.ALL = field.NewField(tableName, "*")
	_virtualCurrencyRecord.ID = field.NewInt64(tableName, "id")
	_virtualCurrencyRecord.UserID = field.NewInt64(tableName, "user_id")
	_virtualCurrencyRecord.VirtualCurrencyCnt = field.NewInt32(tableName, "virtual_currency_cnt")
	_virtualCurrencyRecord.Source = field.NewInt32(tableName, "source")
	_virtualCurrencyRecord.RecordType = field.NewInt32(tableName, "record_type")
	_virtualCurrencyRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_virtualCurrencyRecord.UpdatedAt = field.NewTime(tableName, "updated_at")

	_virtualCurrencyRecord.fillFieldMap()

	return _virtualCurrencyRecord
}

type virtualCurrencyRecord struct {
	virtualCurrencyRecordDo virtualCurrencyRecordDo

	ALL                field.Field
	ID                 field.Int64
	UserID             field.Int64
	VirtualCurrencyCnt field.Int32
	Source             field.Int32
	RecordType         field.Int32
	CreatedAt          field.Time
	UpdatedAt          field.Time

	fieldMap map[string]field.Expr
}

func (v virtualCurrencyRecord) Table(newTableName string) *virtualCurrencyRecord {
	v.virtualCurrencyRecordDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v virtualCurrencyRecord) As(alias string) *virtualCurrencyRecord {
	v.virtualCurrencyRecordDo.DO = *(v.virtualCurrencyRecordDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *virtualCurrencyRecord) updateTableName(table string) *virtualCurrencyRecord {
	v.ALL = field.NewField(table, "*")
	v.ID = field.NewInt64(table, "id")
	v.UserID = field.NewInt64(table, "user_id")
	v.VirtualCurrencyCnt = field.NewInt32(table, "virtual_currency_cnt")
	v.Source = field.NewInt32(table, "source")
	v.RecordType = field.NewInt32(table, "record_type")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")

	v.fillFieldMap()

	return v
}

func (v *virtualCurrencyRecord) WithContext(ctx context.Context) *virtualCurrencyRecordDo {
	return v.virtualCurrencyRecordDo.WithContext(ctx)
}

func (v virtualCurrencyRecord) TableName() string { return v.virtualCurrencyRecordDo.TableName() }

func (v virtualCurrencyRecord) Alias() string { return v.virtualCurrencyRecordDo.Alias() }

func (v *virtualCurrencyRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *virtualCurrencyRecord) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 7)
	v.fieldMap["id"] = v.ID
	v.fieldMap["user_id"] = v.UserID
	v.fieldMap["virtual_currency_cnt"] = v.VirtualCurrencyCnt
	v.fieldMap["source"] = v.Source
	v.fieldMap["record_type"] = v.RecordType
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
}

func (v virtualCurrencyRecord) clone(db *gorm.DB) virtualCurrencyRecord {
	v.virtualCurrencyRecordDo.ReplaceDB(db)
	return v
}

type virtualCurrencyRecordDo struct{ gen.DO }

func (v virtualCurrencyRecordDo) Debug() *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Debug())
}

func (v virtualCurrencyRecordDo) WithContext(ctx context.Context) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v virtualCurrencyRecordDo) ReadDB() *virtualCurrencyRecordDo {
	return v.Clauses(dbresolver.Read)
}

func (v virtualCurrencyRecordDo) WriteDB() *virtualCurrencyRecordDo {
	return v.Clauses(dbresolver.Write)
}

func (v virtualCurrencyRecordDo) Clauses(conds ...clause.Expression) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v virtualCurrencyRecordDo) Returning(value interface{}, columns ...string) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v virtualCurrencyRecordDo) Not(conds ...gen.Condition) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v virtualCurrencyRecordDo) Or(conds ...gen.Condition) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v virtualCurrencyRecordDo) Select(conds ...field.Expr) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v virtualCurrencyRecordDo) Where(conds ...gen.Condition) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v virtualCurrencyRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *virtualCurrencyRecordDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v virtualCurrencyRecordDo) Order(conds ...field.Expr) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v virtualCurrencyRecordDo) Distinct(cols ...field.Expr) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v virtualCurrencyRecordDo) Omit(cols ...field.Expr) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v virtualCurrencyRecordDo) Join(table schema.Tabler, on ...field.Expr) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v virtualCurrencyRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v virtualCurrencyRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v virtualCurrencyRecordDo) Group(cols ...field.Expr) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v virtualCurrencyRecordDo) Having(conds ...gen.Condition) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v virtualCurrencyRecordDo) Limit(limit int) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v virtualCurrencyRecordDo) Offset(offset int) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v virtualCurrencyRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v virtualCurrencyRecordDo) Unscoped() *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Unscoped())
}

func (v virtualCurrencyRecordDo) Create(values ...*model.VirtualCurrencyRecord) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v virtualCurrencyRecordDo) CreateInBatches(values []*model.VirtualCurrencyRecord, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v virtualCurrencyRecordDo) Save(values ...*model.VirtualCurrencyRecord) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v virtualCurrencyRecordDo) First() (*model.VirtualCurrencyRecord, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualCurrencyRecord), nil
	}
}

func (v virtualCurrencyRecordDo) Take() (*model.VirtualCurrencyRecord, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualCurrencyRecord), nil
	}
}

func (v virtualCurrencyRecordDo) Last() (*model.VirtualCurrencyRecord, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualCurrencyRecord), nil
	}
}

func (v virtualCurrencyRecordDo) Find() ([]*model.VirtualCurrencyRecord, error) {
	result, err := v.DO.Find()
	return result.([]*model.VirtualCurrencyRecord), err
}

func (v virtualCurrencyRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VirtualCurrencyRecord, err error) {
	buf := make([]*model.VirtualCurrencyRecord, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v virtualCurrencyRecordDo) FindInBatches(result *[]*model.VirtualCurrencyRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v virtualCurrencyRecordDo) Attrs(attrs ...field.AssignExpr) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v virtualCurrencyRecordDo) Assign(attrs ...field.AssignExpr) *virtualCurrencyRecordDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v virtualCurrencyRecordDo) Joins(fields ...field.RelationField) *virtualCurrencyRecordDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v virtualCurrencyRecordDo) Preload(fields ...field.RelationField) *virtualCurrencyRecordDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v virtualCurrencyRecordDo) FirstOrInit() (*model.VirtualCurrencyRecord, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualCurrencyRecord), nil
	}
}

func (v virtualCurrencyRecordDo) FirstOrCreate() (*model.VirtualCurrencyRecord, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualCurrencyRecord), nil
	}
}

func (v virtualCurrencyRecordDo) FindByPage(offset int, limit int) (result []*model.VirtualCurrencyRecord, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v virtualCurrencyRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v virtualCurrencyRecordDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v *virtualCurrencyRecordDo) withDO(do gen.Dao) *virtualCurrencyRecordDo {
	v.DO = *do.(*gen.DO)
	return v
}
