// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		CreditsRecord:         newCreditsRecord(db),
		PropsInfo:             newPropsInfo(db),
		PropsRecord:           newPropsRecord(db),
		UserInfo:              newUserInfo(db),
		UserProp:              newUserProp(db),
		VirtualCurrencyRecord: newVirtualCurrencyRecord(db),
	}
}

type Query struct {
	db *gorm.DB

	CreditsRecord         creditsRecord
	PropsInfo             propsInfo
	PropsRecord           propsRecord
	UserInfo              userInfo
	UserProp              userProp
	VirtualCurrencyRecord virtualCurrencyRecord
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		CreditsRecord:         q.CreditsRecord.clone(db),
		PropsInfo:             q.PropsInfo.clone(db),
		PropsRecord:           q.PropsRecord.clone(db),
		UserInfo:              q.UserInfo.clone(db),
		UserProp:              q.UserProp.clone(db),
		VirtualCurrencyRecord: q.VirtualCurrencyRecord.clone(db),
	}
}

type queryCtx struct {
	CreditsRecord         *creditsRecordDo
	PropsInfo             *propsInfoDo
	PropsRecord           *propsRecordDo
	UserInfo              *userInfoDo
	UserProp              *userPropDo
	VirtualCurrencyRecord *virtualCurrencyRecordDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CreditsRecord:         q.CreditsRecord.WithContext(ctx),
		PropsInfo:             q.PropsInfo.WithContext(ctx),
		PropsRecord:           q.PropsRecord.WithContext(ctx),
		UserInfo:              q.UserInfo.WithContext(ctx),
		UserProp:              q.UserProp.WithContext(ctx),
		VirtualCurrencyRecord: q.VirtualCurrencyRecord.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
