// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/mc_nft/dal/model"
)

func newPropsRecord(db *gorm.DB) propsRecord {
	_propsRecord := propsRecord{}

	_propsRecord.propsRecordDo.UseDB(db)
	_propsRecord.propsRecordDo.UseModel(&model.PropsRecord{})

	tableName := _propsRecord.propsRecordDo.TableName()
	_propsRecord.ALL = field.NewField(tableName, "*")
	_propsRecord.ID = field.NewInt64(tableName, "id")
	_propsRecord.UserID = field.NewInt64(tableName, "user_id")
	_propsRecord.PropsID = field.NewInt64(tableName, "props_id")
	_propsRecord.DiffNum = field.NewInt32(tableName, "diff_num")
	_propsRecord.RecordType = field.NewInt32(tableName, "record_type")
	_propsRecord.RecordStr = field.NewString(tableName, "record_str")
	_propsRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_propsRecord.UpdatedAt = field.NewTime(tableName, "updated_at")

	_propsRecord.fillFieldMap()

	return _propsRecord
}

type propsRecord struct {
	propsRecordDo propsRecordDo

	ALL        field.Field
	ID         field.Int64
	UserID     field.Int64
	PropsID    field.Int64
	DiffNum    field.Int32
	RecordType field.Int32
	RecordStr  field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (p propsRecord) Table(newTableName string) *propsRecord {
	p.propsRecordDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p propsRecord) As(alias string) *propsRecord {
	p.propsRecordDo.DO = *(p.propsRecordDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *propsRecord) updateTableName(table string) *propsRecord {
	p.ALL = field.NewField(table, "*")
	p.ID = field.NewInt64(table, "id")
	p.UserID = field.NewInt64(table, "user_id")
	p.PropsID = field.NewInt64(table, "props_id")
	p.DiffNum = field.NewInt32(table, "diff_num")
	p.RecordType = field.NewInt32(table, "record_type")
	p.RecordStr = field.NewString(table, "record_str")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *propsRecord) WithContext(ctx context.Context) *propsRecordDo {
	return p.propsRecordDo.WithContext(ctx)
}

func (p propsRecord) TableName() string { return p.propsRecordDo.TableName() }

func (p propsRecord) Alias() string { return p.propsRecordDo.Alias() }

func (p *propsRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *propsRecord) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["props_id"] = p.PropsID
	p.fieldMap["diff_num"] = p.DiffNum
	p.fieldMap["record_type"] = p.RecordType
	p.fieldMap["record_str"] = p.RecordStr
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p propsRecord) clone(db *gorm.DB) propsRecord {
	p.propsRecordDo.ReplaceDB(db)
	return p
}

type propsRecordDo struct{ gen.DO }

func (p propsRecordDo) Debug() *propsRecordDo {
	return p.withDO(p.DO.Debug())
}

func (p propsRecordDo) WithContext(ctx context.Context) *propsRecordDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p propsRecordDo) ReadDB() *propsRecordDo {
	return p.Clauses(dbresolver.Read)
}

func (p propsRecordDo) WriteDB() *propsRecordDo {
	return p.Clauses(dbresolver.Write)
}

func (p propsRecordDo) Clauses(conds ...clause.Expression) *propsRecordDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p propsRecordDo) Returning(value interface{}, columns ...string) *propsRecordDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p propsRecordDo) Not(conds ...gen.Condition) *propsRecordDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p propsRecordDo) Or(conds ...gen.Condition) *propsRecordDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p propsRecordDo) Select(conds ...field.Expr) *propsRecordDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p propsRecordDo) Where(conds ...gen.Condition) *propsRecordDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p propsRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *propsRecordDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p propsRecordDo) Order(conds ...field.Expr) *propsRecordDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p propsRecordDo) Distinct(cols ...field.Expr) *propsRecordDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p propsRecordDo) Omit(cols ...field.Expr) *propsRecordDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p propsRecordDo) Join(table schema.Tabler, on ...field.Expr) *propsRecordDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p propsRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *propsRecordDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p propsRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *propsRecordDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p propsRecordDo) Group(cols ...field.Expr) *propsRecordDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p propsRecordDo) Having(conds ...gen.Condition) *propsRecordDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p propsRecordDo) Limit(limit int) *propsRecordDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p propsRecordDo) Offset(offset int) *propsRecordDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p propsRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *propsRecordDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p propsRecordDo) Unscoped() *propsRecordDo {
	return p.withDO(p.DO.Unscoped())
}

func (p propsRecordDo) Create(values ...*model.PropsRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p propsRecordDo) CreateInBatches(values []*model.PropsRecord, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p propsRecordDo) Save(values ...*model.PropsRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p propsRecordDo) First() (*model.PropsRecord, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropsRecord), nil
	}
}

func (p propsRecordDo) Take() (*model.PropsRecord, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropsRecord), nil
	}
}

func (p propsRecordDo) Last() (*model.PropsRecord, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropsRecord), nil
	}
}

func (p propsRecordDo) Find() ([]*model.PropsRecord, error) {
	result, err := p.DO.Find()
	return result.([]*model.PropsRecord), err
}

func (p propsRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PropsRecord, err error) {
	buf := make([]*model.PropsRecord, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p propsRecordDo) FindInBatches(result *[]*model.PropsRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p propsRecordDo) Attrs(attrs ...field.AssignExpr) *propsRecordDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p propsRecordDo) Assign(attrs ...field.AssignExpr) *propsRecordDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p propsRecordDo) Joins(fields ...field.RelationField) *propsRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p propsRecordDo) Preload(fields ...field.RelationField) *propsRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p propsRecordDo) FirstOrInit() (*model.PropsRecord, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropsRecord), nil
	}
}

func (p propsRecordDo) FirstOrCreate() (*model.PropsRecord, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropsRecord), nil
	}
}

func (p propsRecordDo) FindByPage(offset int, limit int) (result []*model.PropsRecord, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p propsRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p propsRecordDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p *propsRecordDo) withDO(do gen.Dao) *propsRecordDo {
	p.DO = *do.(*gen.DO)
	return p
}
